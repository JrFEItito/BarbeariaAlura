body{
    font-family: 'Montserrat', sans-serif; /* fonte do google fonts */
}
header{
    background: #BBBBBB;
    padding: 20px 0;
}
.caixa{
    position: relative;
    width: 940px;
    margin: 0 auto; /* centralizar o elemento, a div (text-align: center alinha o conteúdo)*/
}
nav{
    position: absolute;  /* absoluto em relação a página, para tá em relação a outro elemento, esse elemento tem que ter position relative*/
    top: 110px;
    right: 0;
}
nav li{
    display: inline;
    margin: 0 0 0 15px;/* topo, direta, para baixo, esquerda */
}
nav a{
    text-transform: uppercase;  /* texto em maiúsculo */
    color: #000000;
    font-weight: bold; /* texto em negrito */
    font-size: 22px;
    text-decoration: none; 
}
nav a:hover{
    color: #c78c19;
    text-decoration: underline;
}
.banner{
    width: 100%;
}
.titulo-principal{
    text-align: center;
    font-size: 2em; /* em->medida proporcional (nesse caso, 2x tamanho base */
    margin: 0 0 1em;
    clear: left; /* limpa o float */
    /* color: rgba(0,0,0,0.3); 0: transparente, 1: opaco -> 0.5 de opacidade */
}
/* .titulo-principal:first-letter{
    font-weight: bold;
} 
.titulo-principal:before{
    content:"[";
}
 .titulo-principal:after{
    content:"]";
} 
p:first-line{
    font-style: italic;*/
.principal{
    padding: 3em 0;
    background: #FEFEFE;
    width: 940px;
    margin: 0 auto;
}
.principal p{
    margin: 0 0 1em;
}
.principal strong{
    font-weight: bold;
}
.principal em{
   font-style: italic;
}
.utensilios{
    width: 120px;
    float: left;/* flutua o elemento para a esquerda */
    margin: 0 20px 20px 0;
}
.mapa{
    padding: 3em 0;
    background: linear-gradient(#FEFEFE, #888888); /* degree, cor, degree, cor .... (degree, %...*/
}
.mapa p{
    margin: 0 0 2em;
    text-align: center; 
}
.mapa-conteudo{
    width: 940px;
    margin: 0 auto;
}
.beneficios{
    padding: 3em 0;
    background: #888888;
}
.conteudo-beneficios{
    width: 640px;
    margin: 0 auto;
}
.lista-beneficios{
    width:40%;/* 40% da largura da página */
    display: inline-block;
    vertical-align: top;
}
.itens{
    line-height: 1.5;/* espçamento entre as linhas */
}
.itens:before{
    content: "✭";
}
.itens:nth-child(1){/* ex: first-child , 2n (todos os elementos pares)*/
    font-weight: bold;
}
.imagem-beneficios{
    width: 60%;
    opacity: 1;
    transition: 400ms;
    box-shadow: 10px 10px 10px 0 #000000;/* sombra no texto */
}
.imagem-beneficios:hover{
    opacity: 0.3;
}
.video{
    width: 560px;
    margin: 2em auto;;
}
footer{
    text-align: center;
    background-image: url("imagens/bg.jpg") ;
    padding: 40px 0;
}
.copyright{ 
    color: #ffffff;
    font-size: 13px;
    margin: 20px 0 0;
}
/* LAYOUT RESPONSIVO: adaptar css para diferentes telas (por meio das midia query e do meta tag de viewport) */

    /* que tipo de tela  (pesquisa) */
@media screen and (max-width: 480px){
    /* entrega esse estilo, mexemos só no que queremos mudar */
    .caixa, .principal, .conteudo-beneficios, .mapa-conteudo, .video{
        width: auto;
    } 
    h1{
        text-align: center;
    }
    nav{
        position: static;
    }
    .lista-beneficios, .imagem-beneficios{
        width: 100%;
    }
}

/* Qual a principal tática para não perder muito tempo criando layouts responsivos?
-Usar medidas proporcionais para tudo (em)
-Criar um layout fluido que se adapte sempre */

/* 
seletores avançados-> fazer seleção de elementos, possivel selecinar os filhos diretos dos elementos pelo simbulo >
ex: main > p {
    background: red;
}
 primeiro paragrafo apos uma imagem-> img + p{
    background: blue;
}
todos paragrafos após imagem-> img ~ p{
    background: yellow;
}
selecionar todos os paragrafos que não estao em uma determinada id->
#missao p:not(#missao p){
    background: orange;
}
<h2>
<section>
    <h2>
    <p>
    </p>
    <h2>
->selecionar o último <h2>->section > p + h2

Calcular largura, altura e posicionamento de um elemento de maneira dinamica:
calc() -> calcula o valor de uma propriedade (ex: width: calc(100% - 20px); (primeiro valor resultado)

Como usar as medidas proporcionais para deixar um elemento de 100% de largura com o equivalente a um terço do elemento pai, menos 10px?
width: calc( (100% / 3) - 10px )~

Opacidade:
tudo pode ter opacidade
em cor: color: rgba(0,0,0,0.5); (0: transparente, 1: opaco -> 0.5 de opacidade
no geral-> opacity: 0.5; (0: transparente, 1: opaco -> 0.5 de opacidade

Sombra: 
text-shadow: 1px 1px 1px 3px #000000; (horizontal, vertical, blur,intensidade da borda, cor)
box-shadow: 19px 10px 1px, 1px #000000, -10px -10px rgba(255,0,0,0.5); (horizontal, vertical, blur,intensidade da borda, cor)
podemos colocar varias sombras, separando-as por ,
fazer uma sombra interna em um elemento->box-shadow: inset 0 0 5px black;
Como manipular a opacidade dos elementos, com a propriedade CSS opacity
Como manipular a opacidade das cores
Como adicionar um sombreamento em volta dos elementos, com a propriedade CSS box-shadow
Como adicionar um sombreamento em textos, com a propriedade CSS text-shadow
Como marcar um elemento para que ele seja apresentado de outra forma, em uma tela de até 480px? -> dentro do @media (max-width: 480px) {}
*/